name: Auto Merge, Build, and Deploy to AWS ECR and ECS

on:
  schedule:
    - cron: '05 3 * * *' # 매일 자정 00:00 (한국 시간, UTC+9 기준)
  workflow_dispatch: # 수동 실행 가능

permissions:
  contents: write
  pull-requests: write

jobs:
  auto_merge_build_deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # 'main' 브랜치에서만 실행
    outputs:
      has_new_commits: ${{ env.has_new_commits }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Git 설정
      - name: Configure Git
        run: |
          git config --global user.email "power4206@gmail.com"
          git config --global user.name "KHY90"

      # feat/* 브랜치에서 dev 브랜치에 새 커밋이 있는지 확인
      - name: Check for new commits in feat/* branches
        id: check_commits
        run: |
          git fetch --all
          NEW_COMMITS_COUNT=$(git rev-list --count --remotes="origin/feat/*" --not origin/dev)
          echo "Number of new commits in feat/* branches: $NEW_COMMITS_COUNT"
          if [ "$NEW_COMMITS_COUNT" -eq 0 ]; then
            echo "No new commits in feat/* branches."
            echo "has_new_commits=false" >> $GITHUB_ENV
          else
            echo "Found new commits in feat/* branches."
            echo "has_new_commits=true" >> $GITHUB_ENV
          fi

      # PR 생성 및 병합
      - name: Create or Find PRs from feat/* branches to dev
        if: env.has_new_commits == 'true'
        env:
          GH_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        run: |
          echo "Attempting to create or find PRs from feat/* branches to dev."
          git for-each-ref --format '%(refname:short)' refs/remotes/origin/feat/* | while read -r TARGET_BRANCH; do
            TARGET_BRANCH=${TARGET_BRANCH#origin/} # Remove 'origin/' prefix
            echo "Processing branch: $TARGET_BRANCH"
            
            PR_URL=$(gh pr list --base dev --head "$TARGET_BRANCH" --json url --jq '.[0].url' || echo "")
            if [ -z "$PR_URL" ]; then
              PR_URL=$(gh pr create --base dev --head "$TARGET_BRANCH" --title "Auto merge $TARGET_BRANCH into dev" --body "자동 생성된 Pull Request" || echo "")
              echo "PR created: $PR_URL"
            else
              echo "Existing PR found: $PR_URL"
            fi
            echo "PR_URL=$PR_URL" >> $GITHUB_ENV
          done

      - name: Auto-merge pull requests
        if: env.has_new_commits == 'true'
        env:
          GH_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        run: |
          echo "Merging all open PRs from feat/* to dev."
          git for-each-ref --format '%(refname:short)' refs/remotes/origin/feat/* | while read -r TARGET_BRANCH; do
            TARGET_BRANCH=${TARGET_BRANCH#origin/} # Remove 'origin/' prefix
            PR_URL=$(gh pr list --base dev --head "$TARGET_BRANCH" --json url --jq '.[0].url' || echo "")
            if [ -n "$PR_URL" ]; then
              echo "Merging PR: $PR_URL"
              gh pr merge "$PR_URL" --merge || echo "Merge failed for $PR_URL."
            else
              echo "No PR found for $TARGET_BRANCH to dev. Skipping merge."
            fi
          done

      # AWS ECR 로그인 및 이미지 푸시
      - name: Log in to Amazon ECR
        if: env.has_new_commits == 'true'
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker image to AWS ECR
        if: env.has_new_commits == 'true'
        run: |
          # AWS ECR 리포지토리 URI
          ECR_REPOSITORY_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/yaggugifrontapp"
          
          # dev 브랜치 체크아웃
          git checkout dev
          
          # Docker 이미지 빌드
          docker build -t yaggugifrontapp --build-arg REACT_APP_LLM=$REACT_APP_LLM --build-arg REACT_APP_TTS=$REACT_APP_TTS .
          
          # Docker 이미지 태그 지정
          docker tag yaggugifrontapp:latest $ECR_REPOSITORY_URI:latest

          # ECR에 이미지 푸시
          docker push $ECR_REPOSITORY_URI:latest

      # ECS 서비스 업데이트
      - name: Update ECS service with new Docker image
        if: env.has_new_commits == 'true'
        run: |
          # ECS 클러스터 이름과 서비스 이름 설정
          ECS_CLUSTER_NAME="yaggugi-cluster"
          ECS_SERVICE_NAME="yaggugifrontapp-service"
          
          # ECS 서비스를 새 Docker 이미지로 업데이트
          aws ecs update-service \
            --cluster $ECS_CLUSTER_NAME \
            --service $ECS_SERVICE_NAME \
            --force-new-deployment \
            --region ${{ secrets.AWS_REGION }}
